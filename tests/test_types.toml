# This is a TOML comment.

# TOML does not have multiline comments,
# So you need to make multiple ones!

# We have four different string types, basic, multi-line, literal and
# multi-line literal strings.

# Here are some basic string examples:
basic_string_1 = "This is a basic string!"
basic_string_2 = "Basic strings are surrounded by quotation marks!"
basic_string_3 = "It also accepts unicode, like Jos\u00E9."

# Here are some multi-line basic strings:
multi_basic_string_1 = """
This is a multi-line basic string in TOML!
You see, it has multiple lines and accepts unicode
as well!
"""

multi_basic_string_2 = """
If you want no line breaks you can use a backslash,
for example:
One \
Two \
Three \
This would print One, Two, Three!
"""

# Here are some literal strings:
literal_string_1 = 'Literal strings are surrounded by single quotation marks!'
literal_string_2 = 'C:\Users\nodejs\templates, no escaping is performed!'
literal_string_3 = 'You can even user more quotation "marks"!!'
literal_string_4 = 'More no escaping example: <\i\c*\s*>'

# Here are some multi-line literal examples:
multi_literal_string_1 = '''\d{2} apps is t[wo]o many'''
multi_literal_string_2 = '''
The first newline is
trimmed in raw strings.
All other whitespace
is preserved.
'''

# ################################################# #
# TOML is not all just strings, we also have numbers!

# Integers can have (+) or (-) prepended to them.
int1 = +99
int2 = 42
int3 = 0
int4 = -17

# Hexadecimal values are prefixed by `0x`.
hex1 = 0xDEADBEEF
hex2 = 0xdeadbeef
hex3 = 0xdead_beef

# Octal values are prefixed by `0o`.
oct1 = 0o01234567
oct2 = 0o755

# Binary values are prefixed by `0b`.
bin1 = 0b11010110

# Fractional values are point separated and can have (+) or (-) prepended.
float1 = +1.0
float2 = 3.1415
float3 = -0.01

# Exponentiation can be done with `e+` or `E`.
float4 = 5e+22
float5 = 1e06
float6 = -2E-2

# And we can have exponentiated floats!
float7 = 6.626e-34

# We can simulate the comma by using `_`.
float8 = 224_617.445_991_228
float9 = 100_000_000.000_000_001

# Infinity values.
infinite1 = inf # positive infinity
infinite2 = +inf # positive infinity
infinite3 = -inf # negative infinity

# Not a number representation.
not1 = nan
not2 = +nan
not3 = -nan

# ########################################## #
# In TOML we can also represent date and time!

# Offset datetime.
odt1 = 1979-05-27T07:32:00Z
odt2 = 1979-05-27T00:32:00-07:00
odt3 = 1979-05-27T00:32:00.999999-07:00

# Local datetime.
ldt1 = 1979-05-27T07:32:00
ldt2 = 1979-05-27T00:32:00.999999

# Local date.
ld1 = 1979-05-27

# Local time.
lt1 = 07:32:00
lt2 = 00:32:00.999999

# #################################### #
# Of course we also have boolean values!

bool1 = true
bool2 = false

# ####################################################################### #
# As for arrays, they are square brackets with values inside, whitespace is
# ignored and elements are separated by commas.
# They can have elements of the above data types and even multiple types.

integers = [ 1, 2, 3 ]
colors = [ "red", "yellow", "green" ]
nested_arrays_of_ints = [ [ 1, 2 ], [3, 4, 5] ]
nested_mixed_array = [ [ 1, 2 ], ["a", "b", "c"] ]
string_array = [ "all", 'strings', """are the same""", '''type''' ]
numbers = [ 0.1, 0.2, 0.5, 1, 2, 5 ]

contributors = [
  "Foo Bar <foo@example.com>",
  { name = "Baz Qux", email = "bazqux@example.com", url = "https://example.com/bazqux" }
]


